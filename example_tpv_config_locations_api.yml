global:
  default_inherits: default

users:
  esg_users:
    abstract: true
    params:
    scheduling:
      prefer:
        - be-pulsar
        - sanjay-pulsar
        - de-pulsar
        - cz-pulsar
        - it-pulsar
        - sp-pulsar
        - uk-pulsar
        - tr-pulsar
        - nor-pulsar
        - pl-pulsar
        - ch-pulsar
        - sl-pulsar
    rank: |
      import sys
      import requests
      import json
      import pathlib
      from ruamel.yaml import YAML
      import logging
    
      # Set up logging
      logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)                       
      log = logging.getLogger(__name__)
        
      # Load static objectstore info 
      # NOTE: currently object store info is stored in a yaml
      objectstore_loc_path = "{{ tpv_config_dir }}/object_store_locations.yml"
      dataset_attributes = helpers.get_dataset_attributes(job.input_datasets)

      yaml=YAML(typ='safe')
      objectstore_file = pathlib.Path(objectstore_loc_path)
      objectstore_dict = yaml.load(objectstore_file)

      # Format the destination data
      candidate_destinations_list = [{"id": dest.id, **dest.context} for dest in candidate_destinations if dest.context and 'latitude' in dest.context and 'longitude' in dest.context]
      log.debug(f"candidate_destinations_list: {candidate_destinations_list}")
      
      # Static job info
      if not entity.gpus:
        gpus = 0
      job_info = {"tool_id": tool.id, "mem": mem, "cores": cores, "gpus": gpus,}

      # URL of the FastAPI application
      api_url = "https://test.usegalaxy.be/tpv-api/process_data"

      input_data = {
        "destinations": candidate_destinations_list,
        "objectstores": objectstore_dict,
        "datasets": dataset_attributes,
        "job_info": job_info,
      }

      # Send a POST request to the API endpoint
      response = requests.post(api_url, json=input_data)

      # Check if the request was successful (status code 200)
      if response.status_code == 200:
          result = response.json()
      else:
          log.debug(f"Request failed with status code {response.status_code}: {response.text}")
          print(f"Request failed with status code {response.status_code}: {response.text}")

      log.debug(f"sorted destinations: {result}")
      # log.debug(f"cand destinations: {[dest.id for dest in candidate_destinations]}")
      # Sort the candidate destinations based on the sorted_destinations from the result
      final_destinations = sorted(
          (dest for dest in candidate_destinations if str(dest.id) in result["sorted_destinations"]),
          key=lambda obj: result["sorted_destinations"].index(str(obj.id))
      )

      final_destinations

  padge:
    inherits: esg_users


tools:
  default:
    cores: 2
    mem: 8
    env: {}
    scheduling:
      require: []
      prefer:
          general
      accept:
      reject:
          offline
    rules: []
    rank: |
      import sys
      import requests
      import json
      import pathlib
      from ruamel.yaml import YAML
      import logging
    
      # Set up logging
      logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)                       
      log = logging.getLogger(__name__)
        
      # Load static objectstore info 
      # NOTE: currently object store info is stored in a yaml
      objectstore_loc_path = "{{ tpv_config_dir }}/object_store_locations.yml"
      dataset_attributes = helpers.get_dataset_attributes(job.input_datasets)

      yaml=YAML(typ='safe')
      objectstore_file = pathlib.Path(objectstore_loc_path)
      objectstore_dict = yaml.load(objectstore_file)

      # Format the destination data latitude': 49.817492, 'longitude
      candidate_destinations_list = [{"id": dest.id, **dest.context} for dest in candidate_destinations if dest.context and 'latitude' in dest.context and 'longitude' in dest.context]
      log.debug(f"candidate_destinations_list: {candidate_destinations_list}")
      
      # Static job info
      if not entity.gpus:
        gpus = 0
      job_info = {"tool_id": tool.id, "mem": mem, "cores": cores, "gpus": gpus,}

      # URL of the FastAPI application
      api_url = "https://test.usegalaxy.be/tpv-api/process_data"

      input_data = {
        "destinations": candidate_destinations_list,
        "objectstores": objectstore_dict,
        "datasets": dataset_attributes,
        "job_info": job_info,
      }

      # Send a POST request to the API endpoint
      response = requests.post(api_url, json=input_data)

      # Check if the request was successful (status code 200)
      if response.status_code == 200:
          result = response.json()
      else:
          log.debug(f"Request failed with status code {response.status_code}: {response.text}")
          print(f"Request failed with status code {response.status_code}: {response.text}")

      log.debug(f"sorted destinations: {result}")
      # log.debug(f"cand destinations: {[dest.id for dest in candidate_destinations]}")
      # Sort the candidate destinations based on the sorted_destinations from the result
      final_destinations = sorted(
          (dest for dest in candidate_destinations if str(dest.id) in result["sorted_destinations"]),
          key=lambda obj: result["sorted_destinations"].index(str(obj.id))
      )

      final_destinations


  trinity:
    cores: 2
    mem: cores * 4
    env: {}
    scheduling:
      require: []
      prefer:
        - pulsar
      accept:
      reject:
        - offline

roles:
  ga_admins:
    scheduling:
      require:
        []


destinations:
  pulsar_italy:
    runner: general_pulsar_1
    max_accepted_cores: 8
    max_accepted_mem: 32
    scheduling:
      accept:
        - general
      require:
        - pulsar
    context:
      latitude: 50.0689816
      longitude: 19.9070188
  slurm_poland:
    runner: slurm
    max_accepted_cores: 16
    max_accepted_mem: 64
    scheduling:
      accept:
        - slurm
    context:
      latitude: 51.9189046
      longitude: 19.1343786
  condor_belgium:
    runner: condor
    max_accepted_cores: 16
    max_accepted_mem: 64
    scheduling:
      accept:
        - condor
    context:
      latitude: 50.5010789
      longitude: 4.4764595
  slurm_germany:
    runner: slurm
    max_accepted_cores: 16
    max_accepted_mem: 64
    scheduling:
      accept:
        - slurm
    context:
      latitude: 51.1642292
      longitude: 10.4541192
  condor_france:
    runner: condor
    max_accepted_cores: 16
    max_accepted_mem: 64
    scheduling:
      accept:
        - condor
    context:
      latitude: 46.71109
      longitude: 1.7191036
  pulsar_australia:
    runner: general_pulsar_1
    max_accepted_cores: 8
    max_accepted_mem: 32
    scheduling:
      accept:
        - general
      require:
        - pulsar
    context:
      latitude: -26.4390917
      longitude: 133.281323
